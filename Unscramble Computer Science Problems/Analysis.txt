

#Task 0:
    Task O has a worst case scenario run time of O(1) as it runs in constant time despite how big the input is.

#Task 1:
    The function goes over the calls input once which is O(n) and goes over the texts input onces which is also O(n), 
    making both the approximated best and worst case scenario O(n).

#Task 2:
    The function goes over calls once making that O(n) and when minding the max value in the dictionary in the worst case scenario is another O(n).
    The approximated worst case scenario is O(n).

#Task 3: 
    The function goes over calls once, which is O(n) then uses the sorted function on it which in the worst case scenario is O(n logn). Then it goest through another array which
    in the worst case scenario is the same size as the input O(n). Out of these three O(n logn) is the greatest making that the apporximated worst case scenario.

#Task 4:
    The function goes over the arrays calls and texts getting a list of all outgoing numbers and incoming numbers which is O(n) for both. Then it goes again into all the Outgoing calls which in the worst case
    scenario is O(n). In this outgoingcalls for loop it includes an if in statement which has a worst case run time of O(1) as the datastructure is a set which uses hashmapping.
    The function then goes through the sorted list of potential telemarketers. The sorted command at worst case scenario has a run time of O(n log n) and going through the array can have
    a worst case scenario of O(n). Overall, O(n logn) is the apporximated worst case scenario.